'''
55. 跳跃游戏
给定一个非负整数数组，你最初位于数组的第一个位置。

数组中的每个元素代表你在该位置可以跳跃的最大长度。

判断你是否能够到达最后一个位置。

示例 1:

输入: [2,3,1,1,4]
输出: true
解释: 我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一个位置。
示例 2:

输入: [3,2,1,0,4]
输出: false
解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。
'''
class Solution:
    def canJump(self, nums: List[int]) -> bool:
        n = len(nums)
        if nums[n-1] == 0:
            n = n-1

        while(n): # 倒叙
            if nums[n-1] == 0: # 发现有0的时候，就开始判断
                temp = n-1
                n -= 1
                # 向前遍历，看有没有可以跳过这个0点的跳跃数
                # 若有就终止循环，从这个点开始继续遍历
                # 如果过了首位还没找到，则终止循环，return False
                while(n!=0 and (nums[n-1] - (temp-(n-1)) <= 0)):
                    n -= 1
                if n == 0:
                    return False
            n -= 1
        return True
